$ 
.
..
bin
CMakeCache.txt
CMakeFiles
cmake_install.cmake
CMakeLists.txt
.git
.gitignore
.gitmodules
googletest
header
images
integration_tests
lib
Makefile
names.txt
README.md
rshell
src
test
unit_tests

h && g 
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#	modified:   googletest (untracked content)
#	modified:   integration_tests/multiple_output.txt
#	modified:   integration_tests/single_output.txt
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	integration_tests/commented_output.txt
no changes added to commit (use "git add" and/or "git commit -a")
$ 
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#	modified:   googletest (untracked content)
#	modified:   integration_tests/multiple_output.txt
#	modified:   integration_tests/single_output.txt
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	integration_tests/commented_output.txt
no changes added to commit (use "git add" and/or "git commit -a")
$ 
hello
.
..
bin
CMakeCache.txt
CMakeFiles
cmake_install.cmake
CMakeLists.txt
.git
.gitignore
.gitmodules
googletest
header
images
integration_tests
lib
Makefile
names.txt
README.md
rshell
src
test
unit_tests
$ 
usage: git [--version] [--help] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

The most commonly used git commands are:
   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   fetch      Download objects and refs from another repository
   grep       Print lines matching a pattern
   init       Create an empty Git repository or reinitialize an existing one
   log        Show commit logs
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
   pull       Fetch from and merge with another repository or a local branch
   push       Update remote refs along with associated objects
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG

'git help -a' and 'git help -g' lists available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
# On branch master
# Changes not staged for commit:
#   (use "git add <file>..." to update what will be committed)
#   (use "git checkout -- <file>..." to discard changes in working directory)
#   (commit or discard the untracked or modified content in submodules)
#
#	modified:   googletest (untracked content)
#	modified:   integration_tests/multiple_output.txt
#	modified:   integration_tests/single_output.txt
#
# Untracked files:
#   (use "git add <file>..." to include in what will be committed)
#
#	integration_tests/commented_output.txt
no changes added to commit (use "git add" and/or "git commit -a")
$ 
usage: git [--version] [--help] [-c name=value]
           [--exec-path[=<path>]] [--html-path] [--man-path] [--info-path]
           [-p|--paginate|--no-pager] [--no-replace-objects] [--bare]
           [--git-dir=<path>] [--work-tree=<path>] [--namespace=<name>]
           <command> [<args>]

The most commonly used git commands are:
   add        Add file contents to the index
   bisect     Find by binary search the change that introduced a bug
   branch     List, create, or delete branches
   checkout   Checkout a branch or paths to the working tree
   clone      Clone a repository into a new directory
   commit     Record changes to the repository
   diff       Show changes between commits, commit and working tree, etc
   fetch      Download objects and refs from another repository
   grep       Print lines matching a pattern
   init       Create an empty Git repository or reinitialize an existing one
   log        Show commit logs
   merge      Join two or more development histories together
   mv         Move or rename a file, a directory, or a symlink
   pull       Fetch from and merge with another repository or a local branch
   push       Update remote refs along with associated objects
   rebase     Forward-port local commits to the updated upstream head
   reset      Reset current HEAD to the specified state
   rm         Remove files from the working tree and from the index
   show       Show various types of objects
   status     Show the working tree status
   tag        Create, list, delete or verify a tag object signed with GPG

'git help -a' and 'git help -g' lists available subcommands and some
concept guides. See 'git help <command>' or 'git help <concept>'
to read about a specific subcommand or concept.
.
..
bin
CMakeCache.txt
CMakeFiles
cmake_install.cmake
CMakeLists.txt
.git
.gitignore
.gitmodules
googletest
header
images
integration_tests
lib
Makefile
names.txt
README.md
rshell
src
test
unit_tests
bin
CMakeCache.txt
CMakeFiles
cmake_install.cmake
CMakeLists.txt
googletest
header
images
integration_tests
lib
Makefile
names.txt
README.md
rshell
src
test
unit_tests
